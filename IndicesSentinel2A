/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var s2 = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED"),
    geometry = ee.FeatureCollection("projects/ee-ahtshamm214/assets/tehsilMzdBoundary");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
Map.centerObject(geometry, 10)
// Create an image composite
var image = s2.filterBounds(geometry)
  .filterDate('2022-01-01', '2022-12-31')
  .filter(ee.Filter.calendarRange(5, 7, 'month'))
  .map(cloudMask)
  .median()
  .clip(geometry);
  
print(image);
// Add to Map
Map.addLayer(image, {
  min: 0.027765999510884286,
  max: 0.18933399863541125,
  gamma: 1.3,
  bands: ['B4', 'B3', 'B2']
}, 'Image');

// Band Map to know which band is from calculation
var bandMap = {
  BLUE: image.select('B2'),
  GREEN: image.select('B3'),
  RED: image.select('B4'),
  NIR: image.select('B8'),
  SWIR1: image.select('B11'),
  SWIR2: image.select('B12')
};

// Calculate Normalized Difference Vegetation Index
var ndvi = image.expression('(NIR - RED) / (NIR + RED)', bandMap).rename('NDVI');
Map.addLayer(ndvi, { min: -1, max: 1, palette: ['blue', 'white', 'green']}, 'NDVI');

// Calculate Enhanced Vegetation Index
var evi = image.expression('(2.5 * (NIR - RED)) / (NIR + 6 * RED - 7 * BLUE + 1)', bandMap).rename('EVI');
Map.addLayer(evi, { min: -1, max: 1, palette: ['blue', 'white', 'green']}, 'EVI');

// Calculate Normalized Difference Water Index
var ndwi = image.expression('(GREEN - SWIR1) / (GREEN + SWIR1)', bandMap).rename('NDWI');
Map.addLayer(ndwi, { min: -1, max: 1, palette: ['red', 'white', 'blue']}, 'NDWI');

// Calculate Normalized Difference Built-up Index
var ndbi = image.expression('(SWIR1 - NIR) / (SWIR1 + NIR)', bandMap).rename('NDBI');
Map.addLayer(ndbi, { min: -1, max: 1, palette: ['blue', 'white', 'red']}, 'NDBI');

// Calculate Enhance Mangrove Vegetation Index
var mvi = image.expression('(GREEN - SWIR2) / (SWIR1 - GREEN)', bandMap).rename('EMVI');
Map.addLayer(mvi, { min: -1, max: 1, palette: ['blue', 'white', 'green']}, 'EMVI');

// Calculate Bare Area Index
var bai = image.expression('(RED+SWIR1) - (NIR + BLUE) / (RED+SWIR1) + (NIR+BLUE)', bandMap).rename('BAI');
Map.addLayer(bai, { min: -1, max: 1, palette: ['green', 'yellow', 'red']}, 'BAI');


// Function to cloud mask
function cloudMask(image){
  var scl = image.select('SCL');
  var mask = scl.eq(3).or(scl.gte(7).and(scl.lte(10))).eq(0);
  return image.select(['B.*']).divide(10000).updateMask(mask);
}

// List of index names and corresponding layers
var indices = [
  { name: 'NDVI', layer: ndvi },
  { name: 'EVI', layer: evi },
  { name: 'NDWI', layer: ndwi },
  { name: 'NDBI', layer: ndbi },
  { name: 'EMVI', layer: mvi },
  { name: 'BAI', layer: bai }
];

// Loop through the indices and export images
for (var i = 0; i < indices.length; i++) {
  var index = indices[i];
  
  // Export image
  Export.image.toDrive({
    image: index.layer.toFloat(), // Convert to float to avoid precision issues
    description: index.name,
    scale: 10, // Adjust the scale as needed
    region: geometry,
    maxPixels: 1e13 // Adjust as needed
  });
}
